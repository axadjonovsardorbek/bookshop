// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: translators.proto

package books

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TranslatorsService_Create_FullMethodName  = "/books.TranslatorsService/Create"
	TranslatorsService_GetById_FullMethodName = "/books.TranslatorsService/GetById"
	TranslatorsService_GetAll_FullMethodName  = "/books.TranslatorsService/GetAll"
	TranslatorsService_Update_FullMethodName  = "/books.TranslatorsService/Update"
	TranslatorsService_Delete_FullMethodName  = "/books.TranslatorsService/Delete"
)

// TranslatorsServiceClient is the client API for TranslatorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslatorsServiceClient interface {
	Create(ctx context.Context, in *TranslatorsRes, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*TranslatorsGetByIdRes, error)
	GetAll(ctx context.Context, in *TranslatorsGetAllReq, opts ...grpc.CallOption) (*TranslatorsGetAllRes, error)
	Update(ctx context.Context, in *TranslatorsUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type translatorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslatorsServiceClient(cc grpc.ClientConnInterface) TranslatorsServiceClient {
	return &translatorsServiceClient{cc}
}

func (c *translatorsServiceClient) Create(ctx context.Context, in *TranslatorsRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TranslatorsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorsServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*TranslatorsGetByIdRes, error) {
	out := new(TranslatorsGetByIdRes)
	err := c.cc.Invoke(ctx, TranslatorsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorsServiceClient) GetAll(ctx context.Context, in *TranslatorsGetAllReq, opts ...grpc.CallOption) (*TranslatorsGetAllRes, error) {
	out := new(TranslatorsGetAllRes)
	err := c.cc.Invoke(ctx, TranslatorsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorsServiceClient) Update(ctx context.Context, in *TranslatorsUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TranslatorsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorsServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TranslatorsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslatorsServiceServer is the server API for TranslatorsService service.
// All implementations must embed UnimplementedTranslatorsServiceServer
// for forward compatibility
type TranslatorsServiceServer interface {
	Create(context.Context, *TranslatorsRes) (*Void, error)
	GetById(context.Context, *ById) (*TranslatorsGetByIdRes, error)
	GetAll(context.Context, *TranslatorsGetAllReq) (*TranslatorsGetAllRes, error)
	Update(context.Context, *TranslatorsUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedTranslatorsServiceServer()
}

// UnimplementedTranslatorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslatorsServiceServer struct {
}

func (UnimplementedTranslatorsServiceServer) Create(context.Context, *TranslatorsRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTranslatorsServiceServer) GetById(context.Context, *ById) (*TranslatorsGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTranslatorsServiceServer) GetAll(context.Context, *TranslatorsGetAllReq) (*TranslatorsGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTranslatorsServiceServer) Update(context.Context, *TranslatorsUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTranslatorsServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTranslatorsServiceServer) mustEmbedUnimplementedTranslatorsServiceServer() {}

// UnsafeTranslatorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslatorsServiceServer will
// result in compilation errors.
type UnsafeTranslatorsServiceServer interface {
	mustEmbedUnimplementedTranslatorsServiceServer()
}

func RegisterTranslatorsServiceServer(s grpc.ServiceRegistrar, srv TranslatorsServiceServer) {
	s.RegisterService(&TranslatorsService_ServiceDesc, srv)
}

func _TranslatorsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslatorsRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorsServiceServer).Create(ctx, req.(*TranslatorsRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorsServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslatorsGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorsServiceServer).GetAll(ctx, req.(*TranslatorsGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslatorsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorsServiceServer).Update(ctx, req.(*TranslatorsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorsServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslatorsService_ServiceDesc is the grpc.ServiceDesc for TranslatorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslatorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.TranslatorsService",
	HandlerType: (*TranslatorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TranslatorsService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _TranslatorsService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TranslatorsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TranslatorsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TranslatorsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translators.proto",
}
