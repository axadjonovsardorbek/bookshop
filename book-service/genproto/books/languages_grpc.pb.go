// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: languages.proto

package books

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LanguagesService_Create_FullMethodName  = "/books.LanguagesService/Create"
	LanguagesService_GetById_FullMethodName = "/books.LanguagesService/GetById"
	LanguagesService_GetAll_FullMethodName  = "/books.LanguagesService/GetAll"
	LanguagesService_Update_FullMethodName  = "/books.LanguagesService/Update"
	LanguagesService_Delete_FullMethodName  = "/books.LanguagesService/Delete"
)

// LanguagesServiceClient is the client API for LanguagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguagesServiceClient interface {
	Create(ctx context.Context, in *LanguagesRes, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*LanguagesRes, error)
	GetAll(ctx context.Context, in *LanguagesGetAllReq, opts ...grpc.CallOption) (*LanguagesGetAllRes, error)
	Update(ctx context.Context, in *LanguagesUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type languagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguagesServiceClient(cc grpc.ClientConnInterface) LanguagesServiceClient {
	return &languagesServiceClient{cc}
}

func (c *languagesServiceClient) Create(ctx context.Context, in *LanguagesRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LanguagesService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*LanguagesRes, error) {
	out := new(LanguagesRes)
	err := c.cc.Invoke(ctx, LanguagesService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) GetAll(ctx context.Context, in *LanguagesGetAllReq, opts ...grpc.CallOption) (*LanguagesGetAllRes, error) {
	out := new(LanguagesGetAllRes)
	err := c.cc.Invoke(ctx, LanguagesService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) Update(ctx context.Context, in *LanguagesUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LanguagesService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LanguagesService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguagesServiceServer is the server API for LanguagesService service.
// All implementations must embed UnimplementedLanguagesServiceServer
// for forward compatibility
type LanguagesServiceServer interface {
	Create(context.Context, *LanguagesRes) (*Void, error)
	GetById(context.Context, *ById) (*LanguagesRes, error)
	GetAll(context.Context, *LanguagesGetAllReq) (*LanguagesGetAllRes, error)
	Update(context.Context, *LanguagesUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedLanguagesServiceServer()
}

// UnimplementedLanguagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLanguagesServiceServer struct {
}

func (UnimplementedLanguagesServiceServer) Create(context.Context, *LanguagesRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLanguagesServiceServer) GetById(context.Context, *ById) (*LanguagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedLanguagesServiceServer) GetAll(context.Context, *LanguagesGetAllReq) (*LanguagesGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedLanguagesServiceServer) Update(context.Context, *LanguagesUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLanguagesServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLanguagesServiceServer) mustEmbedUnimplementedLanguagesServiceServer() {}

// UnsafeLanguagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguagesServiceServer will
// result in compilation errors.
type UnsafeLanguagesServiceServer interface {
	mustEmbedUnimplementedLanguagesServiceServer()
}

func RegisterLanguagesServiceServer(s grpc.ServiceRegistrar, srv LanguagesServiceServer) {
	s.RegisterService(&LanguagesService_ServiceDesc, srv)
}

func _LanguagesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguagesRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).Create(ctx, req.(*LanguagesRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguagesGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).GetAll(ctx, req.(*LanguagesGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguagesUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).Update(ctx, req.(*LanguagesUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguagesService_ServiceDesc is the grpc.ServiceDesc for LanguagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.LanguagesService",
	HandlerType: (*LanguagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LanguagesService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _LanguagesService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _LanguagesService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LanguagesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LanguagesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "languages.proto",
}
